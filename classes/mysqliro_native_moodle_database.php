<?php

/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 30/05/2017
 * Time: 17:08
 */
defined('MOODLE_INTERNAL') || die();

require_once(__DIR__.'/moodle_database.php');
require_once(__DIR__.'/mysqli_native_moodle_recordset.php');
require_once(__DIR__.'/mysqli_native_moodle_database.php');
require_once(__DIR__.'/mysqli_native_moodle_temptables.php');
class mysqliro_native_moodle_database extends mysqli_native_moodle_database
{
    public function get_writable_tables() {

        $writabletables = array(
            'sessions',
            'logstore_standard_log',
            'user_last_access',
            'backup_controllers',
            'backup_logs',
            'userbackup_logs',
            'backup_ids_temp',
            'backup_courses',
            'files',
            'question_categories',
            'question_attempts',
            'question_attempt_steps',
            'question_attempt_step_data',
            'question_usages',
            'quiz_attempts'
        );
        return $writabletables;
    }
    public function get_drivername(){
        return 'mysqliro';
    }
    public function set_field($table, $newfield, $newvalue, array $conditions=null) {
        if($this->is_readonly($table)){
            return true;
        }
        return parent::set_field($table,$newfield, $newvalue,$conditions); 
    }
    public function is_readonly($table){
        $writabletables=$this->get_writable_tables();
        $enable_readonly = get_config('local_read_only','enable_readonly');
        if(!CLI_SCRIPT && $enable_readonly && !in_array($table,$writabletables) && !is_siteadmin()) {
            return true;
        }
    }
    public function insert_record_raw($table, $params, $returnid = true, $bulk = false, $customsequence = false) {
        if($this->is_readonly($table)){
            return true;
        }
        return parent::insert_record_raw($table, $params, $returnid, $bulk, $customsequence); // TODO: Change the autogenerated stub
    }
    public function update_record_raw($table, $params, $bulk = false) {
        if($this->is_readonly($table)){
            return true;
        }
        return parent::update_record_raw($table, $params,
                $bulk); 
    }
    public function delete_records_select($table, $select, array $params = null) {
        if($this->is_readonly($table)){
            return true;
        }
        return parent::delete_records_select($table, $select, $params);
    }
}